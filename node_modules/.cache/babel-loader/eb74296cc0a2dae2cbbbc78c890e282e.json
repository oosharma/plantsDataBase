{"ast":null,"code":"var _jsxFileName = \"/Users/abhisheksharma/Desktop/plant-base/src/App.js\";\nimport React, { Component } from \"react\";\nimport SearchBar from \"./components/SearchBar/SearchBar\";\nimport axios from \"axios\";\nimport { Table, Container, Display4, Row } from \"bootstrap-4-react\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      id: 0,\n      message: null,\n      bloom_time: null,\n      plant_type: null,\n      appropriate_location: null,\n      intervalIsSet: false,\n      idToDelete: null,\n      idToUpdate: null,\n      objectToUpdate: null,\n      addName: \"\",\n      addBloom_time: \"\",\n      addPlant_type: \"\",\n      addAppropriate_location: \"\",\n      emptyDB: 0,\n      showPinned: true\n    };\n\n    this.addToDB = () => {\n      console.log(this.state.addName);\n      this.putDataToDB(this.state.addName);\n    };\n\n    this.changeAddItem = result => {\n      this.setState({\n        addName: result.common_name,\n        addBloom_time: result.bloom_time,\n        addPlant_type: result.plant_type,\n        addAppropriate_location: result.appropriate_location\n      }, () => {\n        console.log(\"setState completed\", this.state);\n        this.addToDB();\n      });\n    };\n\n    this.getDataFromDb = () => {\n      fetch(\"http://localhost:3001/api/getData\").then(data => data.json()).then(res => this.setState({\n        data: res.data\n      }));\n    };\n\n    this.putDataToDB = message => {\n      let currentIds = this.state.data.map(data => data.id);\n      let idToBeAdded = 0;\n\n      while (currentIds.includes(idToBeAdded)) {\n        ++idToBeAdded;\n      }\n\n      axios.post(\"http://localhost:3001/api/putData\", {\n        id: idToBeAdded,\n        message: message,\n        bloom_time: this.state.addBloom_time,\n        plant_type: this.state.addPlant_type,\n        appropriate_location: this.state.addAppropriate_location\n      });\n    };\n\n    this.deleteFromDB = idTodelete => {\n      parseInt(idTodelete);\n      let objIdToDelete = null;\n      this.state.data.forEach(dat => {\n        if (dat.id == idTodelete) {\n          objIdToDelete = dat._id;\n        }\n      });\n      axios.delete(\"http://localhost:3001/api/deleteData\", {\n        data: {\n          id: objIdToDelete\n        }\n      });\n    };\n\n    this.updateDB = (idToUpdate, updateToApply) => {\n      let objIdToUpdate = null;\n      parseInt(idToUpdate);\n      this.state.data.forEach(dat => {\n        if (dat.id == idToUpdate) {\n          objIdToUpdate = dat._id;\n        }\n      });\n      axios.post(\"http://localhost:3001/api/updateData\", {\n        id: objIdToUpdate,\n        update: {\n          message: updateToApply\n        }\n      });\n    };\n\n    this.handleEmptyDb = () => {\n      // this.setState({\n      //   emptyDB: true\n      // });\n      // this.setState({ emptyDB: 1 });\n      return \"Empty... please create a search and pin your favorite plants\";\n    };\n\n    this.checkDbEmpty = () => {\n      console.log(\"here\");\n\n      if (this.state.data.length <= 0) {\n        this.setState({\n          showPinned: false\n        });\n        console.log(\"there\");\n      } else {\n        this.setState({\n          showPinned: true\n        });\n        console.log(\"whrer\");\n      }\n    };\n  }\n\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({\n        intervalIsSet: interval\n      });\n    }\n  } // never let a process live forever\n  // always kill a process everytime we are done using it\n\n\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({\n        intervalIsSet: null\n      });\n    }\n  } // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n\n\n  // here is our UI\n  // it is easy to understand their functions when you\n  // see them render into our screen\n  render() {\n    const data = this.state.data;\n\n    if (this.state.data.length) {\n      return React.createElement(React.Fragment, null, React.createElement(SearchBar, {\n        changeAddItem: this.changeAddItem.bind(this),\n        addToDB: this.addToDB.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }), React.createElement(Container, {\n        className: \"mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, React.createElement(Display4, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        },\n        __self: this\n      }, \"Pinned Results\")), React.createElement(Table, {\n        className: true,\n        striped: true,\n        bordered: true,\n        hover: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        className: \"head-1\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, \"Name\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, \"Bloom Time\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, \"Plant Type\"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, \"Appropriate Location\"))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, data.length <= 0 ? this.handleEmptyDb() : data.map(dat => {\n        return React.createElement(React.Fragment, null, React.createElement(\"tr\", {\n          key: data.message,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181\n          },\n          __self: this\n        }, dat.message), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 182\n          },\n          __self: this\n        }, dat.bloom_time, \" \"), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 183\n          },\n          __self: this\n        }, dat.plant_type, \" \"), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 184\n          },\n          __self: this\n        }, dat.appropriate_location, \" \"), React.createElement(\"td\", {\n          onClick: () => this.setState({\n            idToDelete: dat.id\n          }, () => this.deleteFromDB(this.state.idToDelete)),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 186\n          },\n          __self: this\n        }, \"Delete\")));\n      })))));\n    } else {\n      return React.createElement(React.Fragment, null, React.createElement(SearchBar, {\n        changeAddItem: this.changeAddItem.bind(this),\n        addToDB: this.addToDB.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 207\n        },\n        __self: this\n      }), React.createElement(Container, {\n        className: \"mt-5\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }, React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 213\n        },\n        __self: this\n      }, React.createElement(Display4, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }, \"Use Search to Find Plants and Pin them here\"))));\n    }\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/abhisheksharma/Desktop/plant-base/src/App.js"],"names":["React","Component","SearchBar","axios","Table","Container","Display4","Row","App","state","data","id","message","bloom_time","plant_type","appropriate_location","intervalIsSet","idToDelete","idToUpdate","objectToUpdate","addName","addBloom_time","addPlant_type","addAppropriate_location","emptyDB","showPinned","addToDB","console","log","putDataToDB","changeAddItem","result","setState","common_name","getDataFromDb","fetch","then","json","res","currentIds","map","idToBeAdded","includes","post","deleteFromDB","idTodelete","parseInt","objIdToDelete","forEach","dat","_id","delete","updateDB","updateToApply","objIdToUpdate","update","handleEmptyDb","checkDbEmpty","length","componentDidMount","interval","setInterval","componentWillUnmount","clearInterval","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport SearchBar from \"./components/SearchBar/SearchBar\";\nimport axios from \"axios\";\nimport { Table, Container, Display4, Row } from \"bootstrap-4-react\";\n\nclass App extends Component {\n  // initialize our state\n  state = {\n    data: [],\n    id: 0,\n    message: null,\n    bloom_time: null,\n    plant_type: null,\n    appropriate_location: null,\n    intervalIsSet: false,\n    idToDelete: null,\n    idToUpdate: null,\n    objectToUpdate: null,\n    addName: \"\",\n    addBloom_time: \"\",\n    addPlant_type: \"\",\n    addAppropriate_location: \"\",\n    emptyDB: 0,\n    showPinned: true\n  };\n  addToDB = () => {\n    console.log(this.state.addName);\n    this.putDataToDB(this.state.addName);\n  };\n  changeAddItem = result => {\n    this.setState(\n      {\n        addName: result.common_name,\n        addBloom_time: result.bloom_time,\n        addPlant_type: result.plant_type,\n        addAppropriate_location: result.appropriate_location\n      },\n      () => {\n        console.log(\"setState completed\", this.state);\n        this.addToDB();\n      }\n    );\n  };\n  // when component mounts, first thing it does is fetch all existing data in our db\n  // then we incorporate a polling logic so that we can easily see if our db has\n  // changed and implement those changes into our UI\n  componentDidMount() {\n    this.getDataFromDb();\n    if (!this.state.intervalIsSet) {\n      let interval = setInterval(this.getDataFromDb, 1000);\n      this.setState({ intervalIsSet: interval });\n    }\n  }\n\n  // never let a process live forever\n  // always kill a process everytime we are done using it\n  componentWillUnmount() {\n    if (this.state.intervalIsSet) {\n      clearInterval(this.state.intervalIsSet);\n      this.setState({ intervalIsSet: null });\n    }\n  }\n\n  // just a note, here, in the front end, we use the id key of our data object\n  // in order to identify which we want to Update or delete.\n  // for our back end, we use the object id assigned by MongoDB to modify\n  // data base entries\n\n  // our first get method that uses our backend api to\n  // fetch data from our data base\n  getDataFromDb = () => {\n    fetch(\"http://localhost:3001/api/getData\")\n      .then(data => data.json())\n      .then(res => this.setState({ data: res.data }));\n  };\n\n  // our put method that uses our backend api\n  // to create new query into our data base\n  putDataToDB = message => {\n    let currentIds = this.state.data.map(data => data.id);\n    let idToBeAdded = 0;\n    while (currentIds.includes(idToBeAdded)) {\n      ++idToBeAdded;\n    }\n\n    axios.post(\"http://localhost:3001/api/putData\", {\n      id: idToBeAdded,\n      message: message,\n      bloom_time: this.state.addBloom_time,\n      plant_type: this.state.addPlant_type,\n      appropriate_location: this.state.addAppropriate_location\n    });\n  };\n\n  // our delete method that uses our backend api\n  // to remove existing database information\n  deleteFromDB = idTodelete => {\n    parseInt(idTodelete);\n    let objIdToDelete = null;\n    this.state.data.forEach(dat => {\n      if (dat.id == idTodelete) {\n        objIdToDelete = dat._id;\n      }\n    });\n\n    axios.delete(\"http://localhost:3001/api/deleteData\", {\n      data: {\n        id: objIdToDelete\n      }\n    });\n  };\n\n  // our update method that uses our backend api\n  // to overwrite existing data base information\n  updateDB = (idToUpdate, updateToApply) => {\n    let objIdToUpdate = null;\n    parseInt(idToUpdate);\n    this.state.data.forEach(dat => {\n      if (dat.id == idToUpdate) {\n        objIdToUpdate = dat._id;\n      }\n    });\n\n    axios.post(\"http://localhost:3001/api/updateData\", {\n      id: objIdToUpdate,\n      update: { message: updateToApply }\n    });\n  };\n  handleEmptyDb = () => {\n    // this.setState({\n    //   emptyDB: true\n    // });\n    // this.setState({ emptyDB: 1 });\n    return \"Empty... please create a search and pin your favorite plants\";\n  };\n  checkDbEmpty = () => {\n    console.log(\"here\");\n    if (this.state.data.length <= 0) {\n      this.setState({ showPinned: false });\n      console.log(\"there\");\n    } else {\n      this.setState({ showPinned: true });\n      console.log(\"whrer\");\n    }\n  };\n\n  // here is our UI\n  // it is easy to understand their functions when you\n  // see them render into our screen\n  render() {\n    const { data } = this.state;\n\n    if (this.state.data.length) {\n      return (\n        <>\n          <SearchBar\n            changeAddItem={this.changeAddItem.bind(this)}\n            addToDB={this.addToDB.bind(this)}\n          />\n\n          <Container className=\"mt-5\">\n            <Row>\n              <Display4>Pinned Results</Display4>\n            </Row>\n            <Table className striped bordered hover>\n              <thead>\n                <tr>\n                  <th className=\"head-1\">Name</th>\n                  <th>Bloom Time</th>\n                  <th>Plant Type</th>\n                  <th>Appropriate Location</th>\n                </tr>\n              </thead>\n              <tbody>\n                {data.length <= 0\n                  ? this.handleEmptyDb()\n                  : data.map(dat => {\n                      return (\n                        <>\n                          <tr key={data.message}>\n                            <td>{dat.message}</td>\n                            <td>{dat.bloom_time} </td>\n                            <td>{dat.plant_type} </td>\n                            <td>{dat.appropriate_location} </td>\n\n                            <td\n                              onClick={() =>\n                                this.setState({ idToDelete: dat.id }, () =>\n                                  this.deleteFromDB(this.state.idToDelete)\n                                )\n                              }\n                            >\n                              Delete\n                            </td>\n                          </tr>\n                        </>\n                      );\n                    })}\n              </tbody>\n            </Table>\n          </Container>\n        </>\n      );\n    } else {\n      return (\n        <>\n          <SearchBar\n            changeAddItem={this.changeAddItem.bind(this)}\n            addToDB={this.addToDB.bind(this)}\n          />\n\n          <Container className=\"mt-5\">\n            <Row>\n              <Display4>Use Search to Find Plants and Pin them here</Display4>\n            </Row>\n          </Container>\n        </>\n      );\n    }\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}